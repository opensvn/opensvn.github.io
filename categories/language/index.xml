<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language on 招财猫的博客</title>
    <link>https://gitop.cc/categories/language/</link>
    <description>Recent content in Language on 招财猫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Jul 2019 20:30:19 +0800</lastBuildDate><atom:link href="https://gitop.cc/categories/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重构、测试和调试</title>
      <link>https://gitop.cc/post/refactoring-testing-debugging/</link>
      <pubDate>Wed, 24 Jul 2019 20:30:19 +0800</pubDate>
      
      <guid>https://gitop.cc/post/refactoring-testing-debugging/</guid>
      <description>重构以提高可读性和灵活性 提高代码的可读性 我们介绍三个简单的重构，使用lambda、方法引用和流，将它们应用到代码中，以提高代码的可读性： 将匿</description>
    </item>
    
    <item>
      <title>Collection API增强</title>
      <link>https://gitop.cc/post/collection-api-enhancements/</link>
      <pubDate>Wed, 24 Jul 2019 14:22:44 +0800</pubDate>
      
      <guid>https://gitop.cc/post/collection-api-enhancements/</guid>
      <description>Collection工厂 Java 9引入了一些创建小型集合对象的方法，比如Arrays.asList()： 1 List&amp;lt;String&amp;gt; friends = Arrays.asList(&amp;#34;Raphael&amp;#34;, &amp;#34;Olivia&amp;#34;, &amp;#34;Thibaut&amp;#34;); Arrays.asList(</description>
    </item>
    
    <item>
      <title>并行数据处理和性能</title>
      <link>https://gitop.cc/post/parallel-data-processing-and-performance/</link>
      <pubDate>Tue, 23 Jul 2019 20:00:47 +0800</pubDate>
      
      <guid>https://gitop.cc/post/parallel-data-processing-and-performance/</guid>
      <description>并行流 通过调用parallelStream方法，可以将集合转换为并行流。并行流是将元素分割成多个块的流，使用不同的线程处理每个块。因此，你可</description>
    </item>
    
    <item>
      <title>使用流收集数据</title>
      <link>https://gitop.cc/post/collecting-data-with-streams/</link>
      <pubDate>Tue, 23 Jul 2019 13:04:54 +0800</pubDate>
      
      <guid>https://gitop.cc/post/collecting-data-with-streams/</guid>
      <description>假设有一个事务列表，你希望根据货币对它们进行分组。在Java 8之前，即使是这样一个简单的例子也很难实现，如下所示： 1 2 3 4 5 6 7 8 9 10 Map&amp;lt;Currency, List&amp;lt;Transaction&amp;gt;&amp;gt; transactionsByCurrencies</description>
    </item>
    
    <item>
      <title>使用流</title>
      <link>https://gitop.cc/post/working-with-streams/</link>
      <pubDate>Thu, 11 Jul 2019 08:39:11 +0800</pubDate>
      
      <guid>https://gitop.cc/post/working-with-streams/</guid>
      <description>过滤 使用谓词过滤 filter方法接受一个谓词函数为参数，并返回包含所有匹配谓词的元素的流。如下例： 1 List&amp;lt;Dish&amp;gt; vegetarianMenu = menu.stream().filter(Dish::isVegetarian).collect(toList()); 如下图所示： 过滤唯一元素 dist</description>
    </item>
    
    <item>
      <title>流介绍</title>
      <link>https://gitop.cc/post/introducing-streams/</link>
      <pubDate>Wed, 10 Jul 2019 17:22:30 +0800</pubDate>
      
      <guid>https://gitop.cc/post/introducing-streams/</guid>
      <description>流是什么 流是对Java API的更新，允许你以声明式的方式操作数据集合。首先看一个例子，假设你想获得所有热量低于400卡的菜肴的名字，并按热量</description>
    </item>
    
    <item>
      <title>Lambda表达式</title>
      <link>https://gitop.cc/post/lambda-expressions/</link>
      <pubDate>Wed, 10 Jul 2019 08:48:55 +0800</pubDate>
      
      <guid>https://gitop.cc/post/lambda-expressions/</guid>
      <description>Lambda概述 lambda表达式没有名称，但是它有参数列表，函数体和返回类型，还可能包含一个异常列表。 匿名，lambda表达式不像方法一样</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://gitop.cc/post/arrays/</link>
      <pubDate>Mon, 12 Nov 2018 19:37:34 +0800</pubDate>
      
      <guid>https://gitop.cc/post/arrays/</guid>
      <description>创建数组 创建数组的最简单方法是使用数组字面值： 1 2 3 var empty = []; // An array with no elements var primes = [2, 3, 5, 7, 11]; // An array with 5 numeric elements var misc = [1.1, true, &amp;#34;a&amp;#34;,]; // 3 elements of various types + trailing comma 数组字面</description>
    </item>
    
    <item>
      <title>对象</title>
      <link>https://gitop.cc/post/objects/</link>
      <pubDate>Sat, 03 Nov 2018 21:39:25 +0800</pubDate>
      
      <guid>https://gitop.cc/post/objects/</guid>
      <description>对象的属性也有属性： 可写属性指定属性的值是否可以设置。 枚举属性指定属性名是否能由for/in循环返回。 可配置属性指定属性是否可以删除和更改。</description>
    </item>
    
    <item>
      <title>语句</title>
      <link>https://gitop.cc/post/statements/</link>
      <pubDate>Tue, 30 Oct 2018 21:16:04 +0800</pubDate>
      
      <guid>https://gitop.cc/post/statements/</guid>
      <description>JavaScript语句以分号结束。表达式被计算以产生值，但是语句被执行以使某些事情发生。 表达式语句 JavaScript中最简单的语句是具有</description>
    </item>
    
    <item>
      <title>表达式和操作符</title>
      <link>https://gitop.cc/post/expressions_and_operators/</link>
      <pubDate>Sun, 28 Oct 2018 21:07:21 +0800</pubDate>
      
      <guid>https://gitop.cc/post/expressions_and_operators/</guid>
      <description>表达式是JavaScript的一个短语，JavaScript解释器可以对其进行求值。 主表达式 最简单的表达式，称为主表达式，是那些独立的表达式</description>
    </item>
    
    <item>
      <title>类型、值和变量</title>
      <link>https://gitop.cc/post/types_values_variables/</link>
      <pubDate>Sun, 28 Oct 2018 14:24:21 +0800</pubDate>
      
      <guid>https://gitop.cc/post/types_values_variables/</guid>
      <description>Javascript类型可以分为两大类：原始类型和对象类型。JavaScript原始类型包括数字、字符串、布尔值、null和undefine</description>
    </item>
    
    <item>
      <title>词法结构</title>
      <link>https://gitop.cc/post/lexical_structure/</link>
      <pubDate>Tue, 16 Oct 2018 08:29:23 +0800</pubDate>
      
      <guid>https://gitop.cc/post/lexical_structure/</guid>
      <description>介绍 JavaScript是一门大小写敏感的语言 JavaScript程序使用Unicode字符集编写 JavaScript使用\u后跟4位16进</description>
    </item>
    
    <item>
      <title>第12章 动态内存</title>
      <link>https://gitop.cc/post/cpp-primer-12/</link>
      <pubDate>Fri, 28 Oct 2016 14:46:23 +0000</pubDate>
      
      <guid>https://gitop.cc/post/cpp-primer-12/</guid>
      <description>静态内存用来存储静态局部对象，类静态成员和全局对象。栈内存用于定义在函数内的非静态对象。静态内存和栈内存分配的对象由编译器自动创建和销毁。栈</description>
    </item>
    
    <item>
      <title>第17章 特殊的库设施</title>
      <link>https://gitop.cc/post/cpp-primer-17/</link>
      <pubDate>Mon, 17 Oct 2016 09:15:58 +0000</pubDate>
      
      <guid>https://gitop.cc/post/cpp-primer-17/</guid>
      <description>17.1 tuple类型 tuple是一个类似pair的模板。每一个pair类型有2个不同类型的成员。一个tuple同样有不同类型的成员，但是它可以有</description>
    </item>
    
    <item>
      <title>第2章 变量和基本类型</title>
      <link>https://gitop.cc/post/cpp-primer-2/</link>
      <pubDate>Mon, 21 Mar 2016 20:27:17 +0000</pubDate>
      
      <guid>https://gitop.cc/post/cpp-primer-2/</guid>
      <description>2.1 基础内置类型 C++定义了一组基础类型，包括算术类型和一个特殊的void类型。算术类型表示字符，整型，布尔值和浮点数类型。void类型不关联</description>
    </item>
    
    <item>
      <title>Python核心编程 第3章</title>
      <link>https://gitop.cc/post/core-python-3/</link>
      <pubDate>Fri, 25 Dec 2015 13:28:23 +0000</pubDate>
      
      <guid>https://gitop.cc/post/core-python-3/</guid>
      <description>3.1 语句和语法 关于Python语句的一些规则和符号： 井号（#）指示Python注释。 换行（\n）是标准行分隔符（一个语句一行） 反斜杠（\）延续</description>
    </item>
    
    <item>
      <title>Python核心编程 第2章</title>
      <link>https://gitop.cc/post/core-python-2/</link>
      <pubDate>Thu, 24 Dec 2015 09:46:13 +0000</pubDate>
      
      <guid>https://gitop.cc/post/core-python-2/</guid>
      <description>命令行选项 -d 提供调试输出 -O 生成优化字节码（产生.pyo文件） -S 启动时不要运行导入地址查询Python路径 -v 详细输出（详细追踪import语句</description>
    </item>
    
    <item>
      <title>21世纪C语言 第2章 调试，测试，文档</title>
      <link>https://gitop.cc/post/21st-c-2/</link>
      <pubDate>Fri, 18 Dec 2015 15:48:18 +0000</pubDate>
      
      <guid>https://gitop.cc/post/21st-c-2/</guid>
      <description>使用调试器 关于调试器的第一个简明提示：总是使用调试器。 一个调试侦探故事 调试代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>21世纪C语言 第1章 便利编译配置</title>
      <link>https://gitop.cc/post/21st-c-1/</link>
      <pubDate>Tue, 15 Dec 2015 19:55:08 +0000</pubDate>
      
      <guid>https://gitop.cc/post/21st-c-1/</guid>
      <description>使用包管理器 必须获取的包： 编译器。必须安装gcc；clang可能也有用。 gdb，调试器 Valgrind，测试C内存使用错误。 gprof，一个</description>
    </item>
    
    <item>
      <title>第16章 模板和泛型编程</title>
      <link>https://gitop.cc/post/cpp-primer-16/</link>
      <pubDate>Mon, 14 Dec 2015 10:34:42 +0000</pubDate>
      
      <guid>https://gitop.cc/post/cpp-primer-16/</guid>
      <description>面向对象编程和泛型编程都是处理程序编写时类型未知的情况。两者的区别是面向对象编程直到运行时类型才能知道，而泛型编程类型在编译期间知道。 容器，</description>
    </item>
    
    <item>
      <title>第15章 面向对象编程</title>
      <link>https://gitop.cc/post/cpp-primer-15/</link>
      <pubDate>Mon, 21 Sep 2015 09:04:53 +0000</pubDate>
      
      <guid>https://gitop.cc/post/cpp-primer-15/</guid>
      <description>15.1 OOP概述 面向对象编程的关键思想是数据抽象，继承和动态绑定。使用数据抽象，我们可以定义接口和实现分离的类。通过继承，我们可以定义相似类之间</description>
    </item>
    
    <item>
      <title>第14章 重载操作和转换</title>
      <link>https://gitop.cc/post/cpp-primer-14/</link>
      <pubDate>Sun, 20 Sep 2015 10:47:02 +0000</pubDate>
      
      <guid>https://gitop.cc/post/cpp-primer-14/</guid>
      <description>基本概念 重载操作符是具有特殊名字的函数：关键字operator后面跟着需要被定义的操作符的符号。像其它函数一样，重载操作符有返回值，参数列表</description>
    </item>
    
  </channel>
</rss>
