<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GUI on 招财猫的博客</title>
    <link>https://gitop.cc/categories/GUI/</link>
    <description>Recent content in GUI on 招财猫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 30 Oct 2015 12:40:00 +0000</lastBuildDate>
    
	<atom:link href="https://gitop.cc/categories/GUI/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyQt编程第8章 数据处理和自定义文件类型</title>
      <link>https://gitop.cc/posts/pyqt-8/</link>
      <pubDate>Fri, 30 Oct 2015 12:40:00 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/pyqt-8/</guid>
      <description>主窗口的职责 主窗口的职责通常是为用户提供高级文件处理动作和展示程序数据。</description>
    </item>
    
    <item>
      <title>PyQt编程第7章 使用Qt Designer</title>
      <link>https://gitop.cc/posts/pyqt-7/</link>
      <pubDate>Wed, 28 Oct 2015 08:50:57 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/pyqt-7/</guid>
      <description>用户界面保存在.ui文件中，包含一个窗口部件和布局的详细情况。Qt Designer能够关联标签和它的伙伴， 设置tab顺序(这个也可以用QWidget.setTabOrder()完成)。Qt Designer也能够关联信号和槽， 但是只能是内置的信号和槽。 一旦用户界面设计完成并保存在.</description>
    </item>
    
    <item>
      <title>PyQt编程第6章 主窗口</title>
      <link>https://gitop.cc/posts/pyqt-6/</link>
      <pubDate>Wed, 21 Oct 2015 11:25:57 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/pyqt-6/</guid>
      <description>创建一个主窗口 import os import platform import sys from PyQt4.QtCore import * from PyQt4.QtGui import * import helpform import newimagedlg import qrc_resources __version__ = &amp;#34;1.0.0&amp;#34; import的顺序：先Python标准模块，然后第三方模块(比如PyQt)，最后自己定义的模块。 一个程序通常有一个版本字符串，按照惯例称为__version__。 class MainWindow(QMainWindow): def __init__(self, parent=None): super(MainWindow, self).__init__(parent) self.image = QImage() self.dirty = False self.filename = None self.mirroredvertically = False self.mirroredhorizontally = False QImage并</description>
    </item>
    
    <item>
      <title>PyQt编程第5章 对话框</title>
      <link>https://gitop.cc/posts/pyqt-5/</link>
      <pubDate>Wed, 14 Oct 2015 16:20:56 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/pyqt-5/</guid>
      <description>对话框以“智力”分类为：哑巴，标准和聪明，取决于对话框知道程序数据的多少。 对话框以“模式”分类为：模式对话框和无模式对话框。 应用模式对话框一旦被调用，用户只能与其交互，不能使用程序其它部分。 窗口模式对话框和应用模式对话框类似，只是它仅仅阻止与其父窗口交互。 无模式对话框允许用户与程</description>
    </item>
    
    <item>
      <title>PyQt编程第4章 GUI编程介绍</title>
      <link>https://gitop.cc/posts/pyqt-4/</link>
      <pubDate>Mon, 12 Oct 2015 20:34:55 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/pyqt-4/</guid>
      <description>一个25行的弹出警告 import sys import time from PyQt4.QtCore import * from PyQt4.QtGui import * app = QApplication(sys.argv) try: due = QTime.currentTime() message = &amp;#34;Alert!&amp;#34; if len(sys.argv) &amp;lt; 2: raise ValueError hours, mins = sys.argv[1].split(&amp;#34;:&amp;#34;) due = QTime(int(hours), int(mins)) if not due.isValid(): raise ValueError if len(sys.argv) &amp;gt; 2: message = &amp;#34; &amp;#34;.join(sys.argv[2:]) except ValueError: message = &amp;#34;Usage: alert.pyw HH:MM [optional message]&amp;#34; # 24hr clock while QTime.currentTime() &amp;lt; due: time.sleep(20) # 20 seconds label = QLabel(&amp;#34;&amp;lt;font color=red size=72&amp;gt;&amp;lt;b&amp;gt;&amp;#34; + message + &amp;#34;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;#34;) label.setWindowFlags(Qt.SplashScreen) label.show() QTimer.singleShot(60000, app.quit) # 1 minute app.exec_() 每一个PyQt图形程序必须有一个QApplication对象，因为它能识别一些命令行的参</description>
    </item>
    
  </channel>
</rss>