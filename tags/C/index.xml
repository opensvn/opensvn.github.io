<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 招财猫的博客</title>
    <link>https://gitop.cc/tags/C/</link>
    <description>Recent content in C on 招财猫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 02 Aug 2018 20:31:02 +0800</lastBuildDate>
    
	<atom:link href="https://gitop.cc/tags/C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>21世纪C语言 第2章 调试，测试，文档</title>
      <link>https://gitop.cc/posts/21st-c-2/</link>
      <pubDate>Fri, 18 Dec 2015 15:48:18 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/21st-c-2/</guid>
      <description>使用调试器 关于调试器的第一个简明提示：总是使用调试器。 一个调试侦探故事 调试代码： #include &amp;lt;math.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; //size_t typedef struct meanvar {double mean, var;} meanvar; meanvar mean_and_var(const double *data){ long double avg = 0, avg2 = 0; long double ratio; size_t count= 0; for(size_t i=0; !isnan(data[i]); i++){ ratio = count/(count+1); count ++; avg *= ratio; avg2 *= ratio; avg += data[i]/(count +0.0); avg2 += pow(data[i], 2)/(count +0.0); } return (meanvar){.mean = avg, .var = avg2 - pow(avg, 2)}; //E[x^2] - E^2[x] } int main(){ double d[] = { 34124.75, 34124.48, 34124.90, 34125.31, 34125.05, 34124.98, NAN}; meanvar mv = mean_and_var(d); printf(&amp;#34;mean: %.10g var: %.10g\n&amp;#34;, mv.mean, mv.var*6/5.); double d2[] = { 4.75, 4.48, 4.90, 5.31, 5.05,</description>
    </item>
    
    <item>
      <title>21世纪C语言 第1章 便利编译配置</title>
      <link>https://gitop.cc/posts/21st-c-1/</link>
      <pubDate>Tue, 15 Dec 2015 19:55:08 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/21st-c-1/</guid>
      <description>使用包管理器 必须获取的包： 编译器。必须安装gcc；clang可能也有用。 gdb，调试器 Valgrind，测试C内存使用错误。 gprof，一个分析工具 make，你永远不需要直接调用编译器 pkg-config，查找库 Doxygen，文档生成 文本编辑器。Emacs或vim。 自动工具：A</description>
    </item>
    
    <item>
      <title>整理代码片段</title>
      <link>https://gitop.cc/posts/baiyu/</link>
      <pubDate>Tue, 10 Nov 2015 11:18:10 +0000</pubDate>
      
      <guid>https://gitop.cc/posts/baiyu/</guid>
      <description>根据pid获取进程名 void get_process_name_by_pid(int pid, char *name) { char buf[256] = {0}; char path[256] = {0}; sprintf(buf, &amp;#34;/proc/%d/exe&amp;#34;, pid); readlink(buf, path, sizeof(path)); char *filename = basename(path); strcpy(name, filename); } C语言变长数组 C99标准才有的特性 void test_vla(const char *str) { int len = strlen(str); char a[len + 1]; memset(a, 0, sizeof(a)); strcpy(a, str); printf(&amp;#34;%s\n&amp;#34;, a); } 确保路径存在 bool besure_path(const char *pathname) { int len = strlen(pathname); char buffer[len + 1]; memset(buffer, 0, sizeof(buffer)); strcpy(buffer, pathname); for (int i = 0; i &amp;lt; len; ++i) { if (buffer[i] == &amp;#39;/&amp;#39;) { buffer[i] = 0; if (access(buffer, F_OK) &amp;lt; 0) { if (mkdir(buffer, 0755) &amp;lt; 0) { return false; } } buffer[i] = &amp;#39;/&amp;#39;; } } return true;</description>
    </item>
    
  </channel>
</rss>